# 2022.12.16# Code is meant to loop through folders and generate the cellranger.swarm file to be run on Biowulf HPC# Import librariesimport osimport re## REQUIRED UPDATES# Currenlty only works with properly labeled files and files with the fastq-data.fastq.gz naming convention.#Define variables# hpap_dir = "C:/Users/heustonef/OneDrive - National Institutes of Health/SingleCellMetaAnalysis/cellranger_test"hpap_dir = "/Users/heustonef/OneDrive-NIH/SingleCellMetaAnalysis/cellranger_test"swarmfile_name = 'test.txt'skippedsamplesfile_name = 'SkippedSamples.txt'sequencedata_type = 'rna'if re.search('atac', sequencedata_type, re.IGNORECASE):    cellranger_module = 'cellranger-atac'    ref_genome_cmd = "--reference=/fdb/cellranger-atac/refdata-cellranger-arc-GRCh38-2020-A-2.0.0"if re.search('rna', sequencedata_type, re.IGNORECASE):    cellranger_module = 'cellranger'    ref_genome_cmd = "--transcriptome=$CELLRANGER_REF/refdata-gex-GRCh38-2020-A"os.chdir(hpap_dir)# Create swarm filewith open(swarmfile_name, 'w') as swarmfile:    swarmfile.write(statement :=' '.join(('#swarm -f', swarmfile_name, ' -g 64 -t 12 --time=48:00:00 --merge-output --module', cellranger_module, '--sbatch \"--mail-type=BEGIN,END,FAIL\"\n\n')))with open(skippedsamplesfile_name, 'w') as skippedsamples:    skippedsamples.write('The following HPAP sample IDs were not written to the swarm file:\n')# Get a list of samples to runsample_list = []for sampleDir in os.listdir(hpap_dir): # for each sample ID    if re.search(r'^HPAP-\d{3}$', sampleDir) is not None: # Make sure it follows the HPAP nomenclature        sample_list.append(sampleDir)    #And add it to the lit of sample IDs to read# GLoop through directory and collect *fastq.gz filesfor sampleDir in sample_list: # for each sample id    fastq_list = [] #Start a new list for each sample ID    batches = set()    for sampleID, subdirs, files in os.walk(sampleDir):        if re.search(sequencedata_type, sampleID, re.IGNORECASE) is not None:            for file in (file for file in files if not file.startswith('.')): #for each fastq file                if file.endswith('.fastq.gz') and re.search('_S\d+_L\d+', file):    # Check it's suffix and fix it if necessary                    if not file.endswith('001.fastq.gz') and 'fastq-data.fastq.gz' in file:                        print('renaming file', file)                        os.rename(os.path.join(sampleID, file), os.path.join(sampleID, file.replace('fastq-data.fastq.gz', '001.fastq.gz')))                    if file.endswith('001.fastq.gz') and 'fastq-data.fastq.gz' in file:                        print('renaming file', file)                        os.rename(os.path.join(sampleID, file), os.path.join(sampleID, file.replace('fastq-data.fastq.gz', '.fastq.gz')))                    fastq_list.append(file) # Now all the fastq files in sampleDir dir are in a list        # Get batch IDs                if len(fastq_list) > 0:                    if ([m := re.search('^.*_FGC\d{4}', x) for x in fastq_list] and m is not None):                        batchID = [re.search("HPAP-?\d{3}(_FGC\d{4})", x).group(1) for x in fastq_list]                    elif ([m := re.search('.*_S\d+_L\d+', x) for x in fastq_list] and m is not None):                        batchID = [re.search('HPAP-?\d{3}(_.*?)(?=_)', x).group(1) for x in fastq_list]                    else:                        print("Could not find batch nomenclature in sampleDir", sampleDir)                    batches.update(batchID)    # Make swarm file            if len(batches) > 0:                sampleID = sampleID.replace(" ", "\ ")                for batch_id in batches:                    sample = ",".join(set([re.match('.*(?=_S\d+_L\d+)', x).group(0) for x in files if batch_id in x]))                # Write swarm file for sample                    with open(swarmfile_name, 'a') as swarmfile:                        swarmfile.write(''.join(('FASTQ_PATH=', sampleID, '; \\\n')))                        swarmfile.write('ulimit -u 10240 -n 16384; \\\n')                        swarmfile.write(''.join((cellranger_module, ' count --id=', ''.join((sampleDir, batch_id)), ' \\\n')))                        swarmfile.write(''.join(('\t ', ref_genome_cmd, ' \\\n')))                        swarmfile.write(''.join(('\t --fastqs=\"$FASTQ_PATH\" \\\n')))                        swarmfile.write(''.join(('\t --sample=', sample, ' \\\n')))                        swarmfile.write(''.join(('\t --localcores=$SLURM_CPUS_PER_TASK \\\n')))                        swarmfile.write(''.join(('\t --localmem=34 \\\n')))                        swarmfile.write(''.join(('\t --jobmode=slurm \\\n')))                        swarmfile.write(''.join(('\t --maxjobs=10')))                        swarmfile.write('\n\n')            else:                print(sampleID)                print("Fastq file name format in", sampleDir, "is not interpretable by current version of MakeSwarmFile_cellranger.py")                with open(skippedsamplesfile_name, 'a') as skippedsamples:                    skippedsamples.write(''.join((sampleDir, '\n')))if os.path.isfile(swarmfile_name):    print(''.join(("Created ", swarmfile_name)))else:    print("Swarmfile creation failed.")